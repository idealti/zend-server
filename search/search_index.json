{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"intro/","text":"Introduction The zend-server family of classes provides functionality for the various server classes, including zend-xmlrpc and zend-json-server . Zend\\Server\\Server provides an interface that mimics PHP\u2019s SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Zend\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Zend\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Intro"},{"location":"intro/#introduction","text":"The zend-server family of classes provides functionality for the various server classes, including zend-xmlrpc and zend-json-server . Zend\\Server\\Server provides an interface that mimics PHP\u2019s SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Zend\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Zend\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Introduction"},{"location":"reflection/","text":"Zend\\Server\\Reflection Zend\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework. Usage Basic usage is as follows: use My\\Entity; use Zend\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function->getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype->getReturnType()); // Get prototype parameters $parameters = $prototype->getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter->getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class->getNamespace(); reflectFunction() returns a Zend\\Server\\Reflection\\Function object; reflectClass() returns a Zend\\Server\\Reflection\\Class object. Please refer to the API documentation to see what methods are available to each.","title":"Reflection"},{"location":"reflection/#zend92server92reflection","text":"Zend\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework.","title":"Zend\\Server\\Reflection"},{"location":"reflection/#usage","text":"Basic usage is as follows: use My\\Entity; use Zend\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function->getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype->getReturnType()); // Get prototype parameters $parameters = $prototype->getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter->getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class->getNamespace(); reflectFunction() returns a Zend\\Server\\Reflection\\Function object; reflectClass() returns a Zend\\Server\\Reflection\\Class object. Please refer to the API documentation to see what methods are available to each.","title":"Usage"},{"location":"zend.server/","text":"Introduction to Zend\\Server The Zend\\Server family of classes provides functionality for the various server classes, including Zend\\XmlRpc\\Server and Zend\\Json\\Server . Zend\\Server\\Server provides an interface that mimics PHP 5\u2019s SoapServer class; all server classes should implement this interface in order to provide a standard server API. The Zend\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Zend\\Server\\Server \u2018s getFunctions() and loadFunctions() methods.","title":"Introduction to Zend\\\\Server"},{"location":"zend.server/#introduction-to-zend92server","text":"The Zend\\Server family of classes provides functionality for the various server classes, including Zend\\XmlRpc\\Server and Zend\\Json\\Server . Zend\\Server\\Server provides an interface that mimics PHP 5\u2019s SoapServer class; all server classes should implement this interface in order to provide a standard server API. The Zend\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Zend\\Server\\Server \u2018s getFunctions() and loadFunctions() methods.","title":"Introduction to Zend\\Server"}]}